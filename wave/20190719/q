ZIP(1L)                                                                ZIP(1L)

[1mNAME[0m
       zip - package and compress (archive) files

[1mSYNOPSIS[0m
       [1mzip  [22m[-[1maABcdDeEfFghjklLmoqrRSTuvVwXyz!@$[22m] [--longoption ...]  [-[1mb [22mpath]
       [-[1mn [22msuffixes] [-[1mt [22mdate] [-[1mtt [22mdate] [[4mzipfile[24m [[4mfile[24m ...]]  [[1m-xi [22mlist]

       [1mzipcloak [22m(see separate man page)

       [1mzipnote [22m(see separate man page)

       [1mzipsplit [22m(see separate man page)

       Note:  Command line processing in [4mzip[24m has been changed to support  long
       options  and  handle all options and arguments more consistently.  Some
       old command lines that depend on command line  inconsistencies  may  no
       longer work.

[1mDESCRIPTION[0m
       [4mzip[24m  is  a compression and file packaging utility for Unix, VMS, MSDOS,
       OS/2, Windows 9x/NT/XP, Minix, Atari, Macintosh, Amiga, and Acorn  RISC
       OS.   It  is analogous to a combination of the Unix commands [4mtar[24m(1) and
       [4mcompress[24m(1) and is compatible with PKZIP (Phil  Katz's  ZIP  for  MSDOS
       systems).

       A  companion  program  ([4munzip[24m(1L))  unpacks  [4mzip[24m archives.  The [4mzip[24m and
       [4munzip[24m(1L) programs can work with archives produced by PKZIP (supporting
       most PKZIP features up to PKZIP version 4.6), and PKZIP and PKUNZIP can
       work with archives produced  by  [4mzip[24m  (with  some  exceptions,  notably
       streamed  archives,  but  recent  changes  in the zip file standard may
       facilitate better compatibility).  [4mzip[24m version 3.0 is  compatible  with
       PKZIP  2.04  and  also supports the Zip64 extensions of PKZIP 4.5 which
       allow archives as well as files to exceed the previous 2 GB limit (4 GB
       in  some  cases).  [4mzip[24m also now supports [1mbzip2 [22mcompression if the [1mbzip2[0m
       library is included when [4mzip[24m is compiled.  Note that PKUNZIP 1.10  can‚Äê
       not extract files produced by PKZIP 2.04 or [4mzip[24m [4m3.0[24m. You must use PKUN‚Äê
       ZIP 2.04g or [4munzip[24m [4m5.0p1[24m (or later versions) to extract them.

       See the [1mEXAMPLES [22msection at the bottom of this  page  for  examples  of
       some typical uses of [4mzip[24m.

       [1mLarge Archives and Zip64.   [4m[22mzip[24m automatically uses the Zip64 extensions
       when files larger than 4 GB are added to an archive,  an  archive  con‚Äê
       taining  Zip64 entries is updated (if the resulting archive still needs
       Zip64), the size of the archive will exceed 4 GB, or when the number of
       entries  in  the archive will exceed about 64K.  Zip64 is also used for
       archives streamed from standard input as the size of such archives  are
       not  known  in advance, but the option [1m-fz- [22mcan be used to force [4mzip[24m to
       create PKZIP 2 compatible archives (as long as Zip64 extensions are not
       needed).   You must use a PKZIP 4.5 compatible unzip, such as [4munzip[24m [4m6.0[0m
       or later, to extract files using the Zip64 extensions.

       In addition, streamed archives, entries encrypted with standard encryp‚Äê
       tion,  or  split archives created with the pause option may not be com‚Äê
       patible with PKZIP as data descriptors are used and PKZIP at  the  time
       of  this  writing does not support data descriptors (but recent changes
       in the PKWare published zip standard now include some support  for  the
       data descriptor format [4mzip[24m uses).

       [1mMac  OS  X.   [22mThough  previous Mac versions had their own [4mzip[24m port, [4mzip[0m
       supports Mac OS X as part of the  Unix  port  and  most  Unix  features
       apply.   References  to "MacOS" below generally refer to MacOS versions
       older than OS X.  Support for some Mac OS features in the Unix Mac OS X
       port, such as resource forks, is expected in the next [4mzip[24m release.

       For  a  brief  help  on  [4mzip[24m and [4munzip[24m, run each without specifying any
       parameters on the command line.

[1mUSE[0m
       The program is useful for packaging a set of  files  for  distribution;
       for archiving files; and for saving disk space by temporarily compress‚Äê
       ing unused files or directories.

       The [4mzip[24m program puts one or more compressed files into a single [4mzip[24m ar‚Äê
       chive,  along  with information about the files (name, path, date, time
       of last modification, protection, and check information to verify  file
       integrity).  An entire directory structure can be packed into a [4mzip[24m ar‚Äê
       chive with a single command.  Compression ratios of 2:1 to 3:1 are com‚Äê
       mon for text files.  [4mzip[24m has one compression method (deflation) and can
       also store files without compression.  (If [1mbzip2 [22msupport is added,  [4mzip[0m
       can  also  compress using [1mbzip2 [22mcompression, but such entries require a
       reasonably modern unzip  to  decompress.   When  [1mbzip2  [22mcompression  is
       selected,  it replaces deflation as the default method.)  [4mzip[24m automati‚Äê
       cally chooses the better of the two (deflation or store or, if [1mbzip2 [22mis
       selected, [1mbzip2 [22mor store) for each file to be compressed.

       [1mCommand format.  [22mThe basic command format is

              [1mzip [22moptions archive inpath inpath ...

       where  [1marchive  [22mis a new or existing [4mzip[24m archive and [1minpath [22mis a direc‚Äê
       tory or file path optionally including wildcards.  When given the  name
       of  an existing [4mzip[24m archive, [4mzip[24m will replace identically named entries
       in the [4mzip[24m archive (matching the relative names as stored  in  the  ar‚Äê
       chive)  or  add  entries for new names.  For example, if [4mfoo.zip[24m exists
       and contains [4mfoo/file1[24m and [4mfoo/file2[24m, and the  directory  [4mfoo[24m  contains
       the files [4mfoo/file1[24m and [4mfoo/file3[24m, then:

              zip -r foo.zip foo

       or more concisely

              zip -r foo foo

       will  replace [4mfoo/file1[24m in [4mfoo.zip[24m and add [4mfoo/file3[24m to [4mfoo.zip[24m.  After
       this,  [4mfoo.zip[24m  contains  [4mfoo/file1[24m,  [4mfoo/file2[24m,  and  [4mfoo/file3[24m,  with
       [4mfoo/file2[24m unchanged from before.

       So if before the zip command is executed [4mfoo.zip[24m has:

               foo/file1 foo/file2

       and directory foo has:

               file1 file3

       then [4mfoo.zip[24m will have:

               foo/file1 foo/file2 foo/file3

       where [4mfoo/file1[24m is replaced and [4mfoo/file3[24m is new.

       [1m-@ file lists.   [22mIf  a file list is specified as [1m-@ [22m[Not on MacOS], [4mzip[0m
       takes the list of input files from standard input instead of  from  the
       command line.  For example,

              zip -@ foo

       will store the files listed one per line on stdin in [4mfoo.zip[24m.

       Under  Unix,  this option can be used to powerful effect in conjunction
       with the [4mfind[24m (1) command.  For example, to archive all  the  C  source
       files in the current directory and its subdirectories:

              find . -name "*.[ch]" -print | zip source -@

       (note  that the pattern must be quoted to keep the shell from expanding
       it).

       [1mStreaming input and output.  [4m[22mzip[24m will also accept a single  dash  ("-")
       as the zip file name, in which case it will write the zip file to stan‚Äê
       dard output, allowing the output to be piped to  another  program.  For
       example:

              zip -r - . | dd of=/dev/nrst0 obs=16k

       would  write the zip output directly to a tape with the specified block
       size for the purpose of backing up the current directory.

       [4mzip[24m also accepts a single dash ("-") as the name of a file to  be  com‚Äê
       pressed,  in  which  case  it  will  read the file from standard input,
       allowing zip to take input from another program. For example:

              tar cf - . | zip backup -

       would compress the output of the tar command for the purpose of backing
       up  the  current  directory. This generally produces better compression
       than the previous example using the -r  option  because  [4mzip[24m  can  take
       advantage of redundancy between files. The backup can be restored using
       the command

              unzip -p backup | tar xf -

       When no zip file name is given and stdout is not a terminal,  [4mzip[24m  acts
       as  a filter, compressing standard input to standard output.  For exam‚Äê
       ple,

              tar cf - . | zip | dd of=/dev/nrst0 obs=16k

       is equivalent to

              tar cf - . | zip - - | dd of=/dev/nrst0 obs=16k

       [4mzip[24m archives created in this manner can be extracted with  the  program
       [4mfunzip[24m  which  is  provided in the [4munzip[24m package, or by [4mgunzip[24m which is
       provided in the [4mgzip[24m package (but some [4mgunzip[24m may not support  this  if
       [4mzip[24m used the Zip64 extensions). For example:

              dd if=/dev/nrst0  ibs=16k | funzip | tar xvf -

       The stream can also be saved to a file and [4munzip[24m used.

       If  Zip64  support  for  large files and archives is enabled and [4mzip[24m is
       used as a filter, [4mzip[24m creates a Zip64 archive that requires a PKZIP 4.5
       or  later compatible unzip to read it.  This is to avoid amgibuities in
       the zip file structure as defined in the current zip  standard  (PKWARE
       AppNote)  where  the decision to use Zip64 needs to be made before data
       is written for the entry, but for a stream the size of the data is  not
       known at that point.  If the data is known to be smaller than 4 GB, the
       option [1m-fz- [22mcan be used to prevent use of Zip64, but [4mzip[24m will exit with
       an  error if Zip64 was in fact needed.  [4mzip[24m [4m3[24m and [4munzip[24m [4m6[24m and later can
       read archives with Zip64 entries.  Also, [4mzip[24m removes the  Zip64  exten‚Äê
       sions  if  not  needed  when  archive  entries  are  copied (see the [1m-U[0m
       ([1m--copy[22m) option).

       When directing the output to another file, note that all options should
       be before the redirection including [1m-x[22m.  For example:

              zip archive "*.h" "*.c" -x donotinclude.h orthis.h > tofile

       [1mZip files.   [22mWhen  changing  an  existing [4mzip[24m archive, [4mzip[24m will write a
       temporary file with the new contents, and only replace the old one when
       the  process  of  creating  the  new version has been completed without
       error.

       If the name of the [4mzip[24m archive  does  not  contain  an  extension,  the
       extension  [1m.zip  [22mis  added.  If  the name already contains an extension
       other than [1m.zip[22m, the existing extension is  kept  unchanged.   However,
       split  archives  (archives  split over multiple files) require the [1m.zip[0m
       extension on the last split.

       [1mScanning and reading files.  [22mWhen [4mzip[24m starts, it  scans  for  files  to
       process  (if  needed).  If this scan takes longer than about 5 seconds,
       [4mzip[24m will display  a  "Scanning  files"  message  and  start  displaying
       progress  dots  every  2  seconds  or  every so many entries processed,
       whichever takes longer.  If there is more than 2 seconds  between  dots
       it  could indicate that finding each file is taking time and could mean
       a slow network connection for example.  (Actually the initial file scan
       is  a  two-step  process where the directory scan is followed by a sort
       and these two steps are separated with a space in the dots.  If  updat‚Äê
       ing an existing archive, a space also appears between the existing file
       scan and the new file scan.)  The scanning  files  dots  are  not  con‚Äê
       trolled  by the [1m-ds [22mdot size option, but the dots are turned off by the
       [1m-q [22mquiet option.  The [1m-sf [22mshow files option can be  used  to  scan  for
       files  and  get  the  list of files scanned without actually processing
       them.

       If [4mzip[24m is not able to read a file, it issues a warning  but  continues.
       See  the [1m-MM [22moption below for more on how [4mzip[24m handles patterns that are
       not matched and files that  are  not  readable.   If  some  files  were
       skipped, a warning is issued at the end of the zip operation noting how
       many files were read and how many skipped.

       [1mCommand modes.  [4m[22mzip[24m now supports two distinct types of  command  modes,
       [1mexternal  [22mand  [1minternal[22m.  The [1mexternal [22mmodes (add, update, and freshen)
       read files from the file system (as well as from an  existing  archive)
       while  the  [1minternal  [22mmodes  (delete  and  copy) operate exclusively on
       entries in an existing archive.

       [1madd[0m
              Update existing entries and add new files.  If the archive  does
              not exist create it.  This is the default mode.

       [1mupdate [22m([1m-u[22m)
              Update  existing entries if newer on the file system and add new
              files.  If the archive does not exist issue warning then  create
              a new archive.

       [1mfreshen [22m([1m-f[22m)
              Update  existing entries of an archive if newer on the file sys‚Äê
              tem.  Does not add new files to the archive.

       [1mdelete [22m([1m-d[22m)
              Select entries in an existing archive and delete them.

       [1mcopy [22m([1m-U[22m)
              Select entries in an existing archive and copy them to a new ar‚Äê
              chive.  This new mode is similar to [1mupdate [22mbut command line pat‚Äê
              terns select entries in the existing archive rather  than  files
              from  the  file system and it uses the [1m--out [22moption to write the
              resulting archive to a new file rather than update the  existing
              archive, leaving the original archive unchanged.

       The new File Sync option ([1m-FS[22m) is also considered a new mode, though it
       is similar to [1mupdate[22m.  This mode  synchronizes  the  archive  with  the
       files  on  the OS, only replacing files in the archive if the file time
       or size of the OS file is different, adding  new  files,  and  deleting
       entries from the archive where there is no matching file.  As this mode
       can delete entries from the archive, consider making a backup  copy  of
       the archive.

       Also see [1m-DF [22mfor creating difference archives.

       See  each option description below for details and the [1mEXAMPLES [22msection
       below for examples.

       [1mSplit archives.  [4m[22mzip[24m version 3.0 and later can create  split  archives.
       A  [1msplit  archive  [22mis a standard zip archive split over multiple files.
       (Note that split archives are not just archives split in to pieces,  as
       the  offsets of entries are now based on the start of each split.  Con‚Äê
       catenating the pieces together will invalidate these offsets, but [4munzip[0m
       can  usually  deal  with it.  [4mzip[24m will usually refuse to process such a
       spliced archive unless the [1m-FF [22mfix option is used to fix the offsets.)

       One use of split archives is storing a large archive on multiple remov‚Äê
       able media.  For a split archive with 20 split files the files are typ‚Äê
       ically named (replace ARCHIVE  with  the  name  of  your  archive)  AR‚Äê
       CHIVE.z01,  ARCHIVE.z02,  ..., ARCHIVE.z19, ARCHIVE.zip.  Note that the
       last file is the [1m.zip [22mfile.  In  contrast,  [1mspanned  archives  [22mare  the
       original  multi-disk archive generally requiring floppy disks and using
       volume labels to store disk numbers.  [4mzip[24m supports split  archives  but
       not  spanned  archives,  though a procedure exists for converting split
       archives of the right size to spanned archives.  The  reverse  is  also
       true,  where  each  file of a spanned archive can be copied in order to
       files with the above names to create a split archive.

       Use [1m-s [22mto set the split size and create a split archive.  The  size  is
       given as a number followed optionally by one of k (kB), m (MB), g (GB),
       or t (TB) (the default is m).  The [1m-sp [22moption can be used to pause  [4mzip[0m
       between splits to allow changing removable media, for example, but read
       the descriptions and warnings for both [1m-s [22mand [1m-sp [22mbelow.

       Though [4mzip[24m does not update split archives, [4mzip[24m provides the new  option
       [1m-O  [22m([1m--output-file  [22mor [1m--out[22m) to allow split archives to be updated and
       saved in a new archive.  For example,

              zip inarchive.zip foo.c bar.c --out outarchive.zip

       reads archive [1minarchive.zip[22m, even if split, adds the  files  [1mfoo.c  [22mand
       [1mbar.c[22m,  and  writes  the resulting archive to [1moutarchive.zip[22m.  If [1minar‚Äê[0m
       [1mchive.zip [22mis split then [1moutarchive.zip [22mdefaults to the same split size.
       Be  aware  that  if [1moutarchive.zip [22mand any split files that are created
       with it already exist, these are always overwritten as  needed  without
       warning.  This may be changed in the future.

       [1mUnicode.   [22mThough the zip standard requires storing paths in an archive
       using a specific character set, in practice zips have stored  paths  in
       archives in whatever the local character set is.  This creates problems
       when an archive is created or updated on a system using  one  character
       set  and  then  extracted on another system using a different character
       set.  When compiled with Unicode support enabled on platforms that sup‚Äê
       port wide characters, [4mzip[24m now stores, in addition to the standard local
       path for backward compatibility, the UTF-8  translation  of  the  path.
       This  provides  a common universal character set for storing paths that
       allows these paths to be fully extracted on other systems that  support
       Unicode and to match as close as possible on systems that don't.

       On  Win32 systems where paths are internally stored as Unicode but rep‚Äê
       resented in the local character set, it's possible that some paths will
       be  skipped during a local character set directory scan.  [4mzip[24m with Uni‚Äê
       code support now can read and store these paths.  Note that Win 9x sys‚Äê
       tems and FAT file systems don't fully support Unicode.

       Be aware that console windows on Win32 and Unix, for example, sometimes
       don't accurately show all characters due to how each  operating  system
       switches  in character sets for display.  However, directory navigation
       tools should show the correct paths if the needed fonts are loaded.

       [1mCommand line format.  [22mThis version of [4mzip[24m has updated command line pro‚Äê
       cessing and support for long options.

       Short options take the form

              -s[-][s[-]...][value][=value][ value]

       where  s  is  a one or two character short option.  A short option that
       takes a value is last in an argument and anything after it is taken  as
       the  value.   If  the option can be negated and "-" immediately follows
       the option, the option is negated.  Short options can also be given  as
       separate arguments

              -s[-][value][=value][ value] -s[-][value][=value][ value] ...

       Short  options  in general take values either as part of the same argu‚Äê
       ment or as the following argument.  An optional =  is  also  supported.
       So

              -ttmmddyyyy

       and

              -tt=mmddyyyy

       and

              -tt mmddyyyy

       all  work.   The  [1m-x  [22mand  [1m-i  [22moptions accept lists of values and use a
       slightly different format described below.  See the [1m-x [22mand [1m-i [22moptions.

       Long options take the form

              --longoption[-][=value][ value]

       where the option starts with --, has a multicharacter name, can include
       a  trailing  dash to negate the option (if the option supports it), and
       can have a value (option argument) specified by preceeding  it  with  =
       (no spaces).  Values can also follow the argument.  So

              --before-date=mmddyyyy

       and

              --before-date mmddyyyy

       both work.

       Long option names can be shortened to the shortest unique abbreviation.
       See the option descriptions below for which support long  options.   To
       avoid confusion, avoid abbreviating a negatable option with an embedded
       dash ("-") at the dash if you plan to negate it (the parser would  con‚Äê
       sider  a  trailing  dash,  such  as  for the option [1m--some-option [22musing
       [1m--some- [22mas the option, as part of  the  name  rather  than  a  negating
       dash).   This  may  be  changed to force the last dash in [1m--some- [22mto be
       negating in the future.

[1mOPTIONS[0m
       [1m-a[0m
       [1m--ascii[0m
              [Systems using EBCDIC] Translate file to ASCII format.

       [1m-A[0m
       [1m--adjust-sfx[0m
              Adjust self-extracting executable  archive.   A  self-extracting
              executable  archive  is created by prepending the SFX stub to an
              existing archive. The [1m-A [22moption tells [4mzip[24m to  adjust  the  entry
              offsets  stored in the archive to take into account this "pream‚Äê
              ble" data.

       Note: self-extracting archives for the Amiga are a  special  case.   At
       present, only the Amiga port of [4mzip[24m is capable of adjusting or updating
       these without corrupting them. -J can be used to remove the SFX stub if
       other updates need to be made.

       [1m-AC[0m
       [1m--archive-clear[0m
              [WIN32]   Once  archive  is  created  (and tested if [1m-T [22mis used,
              which is recommended), clear the  archive  bits  of  files  pro‚Äê
              cessed.   WARNING:  Once  the bits are cleared they are cleared.
              You may want to use the [1m-sf [22mshow files option to store the  list
              of  files  processed  in  case  the  archive  operation  must be
              repeated.  Also consider using the [1m-MM [22mmust  match  option.   Be
              sure to check out [1m-DF [22mas a possibly better way to do incremental
              backups.

       [1m-AS[0m
       [1m--archive-set[0m
              [WIN32]  Only include files  that  have  the  archive  bit  set.
              Directories  are  not stored when [1m-AS [22mis used, though by default
              the paths of entries, including directories, are stored as usual
              and can be used by most unzips to recreate directories.

              The  archive  bit  is set by the operating system when a file is
              modified and, if used with [1m-AC[22m, [1m-AS [22mcan provide  an  incremental
              backup  capability.   However, other applications can modify the
              archive bit and it may not be  a  reliable  indicator  of  which
              files  have  changed since the last archive operation.  Alterna‚Äê
              tive ways to create incremental backups are using [1m-t [22mto use file
              dates,  though  this won't catch old files copied to directories
              being archived, and [1m-DF [22mto create a differential archive.

       [1m-B[0m
       [1m--binary[0m
              [VM/CMS and MVS] force file to be read binary (default is text).

       [1m-B[22mn    [TANDEM] set Edit/Enscribe formatting options with n defined as
              bit  0: Don't add delimiter (Edit/Enscribe)
              bit  1: Use LF rather than CR/LF as delimiter (Edit/Enscribe)
              bit  2: Space fill record to maximum record length (Enscribe)
              bit  3: Trim trailing space (Enscribe)
              bit  8: Force 30K (Expand) large read for unstructured files

       [1m-b [22mpath
       [1m--temp-path [22mpath
              Use the specified [4mpath[24m for the temporary [4mzip[24m archive. For  exam‚Äê
              ple:

                     zip -b /tmp stuff *

              will  put the temporary [4mzip[24m archive in the directory [4m/tmp[24m, copy‚Äê
              ing over [4mstuff.zip[24m to the  current  directory  when  done.  This
              option  is useful when updating an existing archive and the file
              system containing this old archive does not have enough space to
              hold both old and new archives at the same time.  It may also be
              useful when streaming in some cases to avoid the need  for  data
              descriptors.   Note  that using this option may require [4mzip[24m take
              additional time to copy the archive file when done to the desti‚Äê
              nation file system.

       [1m-c[0m
       [1m--entry-comments[0m
              Add  one-line  comments for each file.  File operations (adding,
              updating) are done first, and the user is then  prompted  for  a
              one-line  comment  for each file.  Enter the comment followed by
              return, or just return for no comment.

       [1m-C[0m
       [1m--preserve-case[0m
              [VMS]  Preserve case all on VMS.   Negating  this  option  ([1m-C-[22m)
              downcases.

       [1m-C2[0m
       [1m--preserve-case-2[0m
              [VMS]   Preserve  case ODS2 on VMS.  Negating this option ([1m-C2-[22m)
              downcases.

       [1m-C5[0m
       [1m--preserve-case-5[0m
              [VMS]  Preserve case ODS5 on VMS.  Negating this  option  ([1m-C5-[22m)
              downcases.

       [1m-d[0m
       [1m--delete[0m
              Remove (delete) entries from a [4mzip[24m archive.  For example:

                     zip -d foo foo/tom/junk foo/harry/\* \*.o

              will  remove the entry [4mfoo/tom/junk[24m, all of the files that start
              with [4mfoo/harry/[24m, and all of the files that end with [1m.o  [22m(in  any
              path).   Note  that  shell pathname expansion has been inhibited
              with backslashes, so that [4mzip[24m can see  the  asterisks,  enabling
              [4mzip[24m  to  match on the contents of the [4mzip[24m archive instead of the
              contents of the current directory.   (The  backslashes  are  not
              used  on  MSDOS-based platforms.)  Can also use quotes to escape
              the asterisks as in

                     zip -d foo foo/tom/junk "foo/harry/*" "*.o"

              Not escaping the asterisks on a system where the  shell  expands
              wildcards  could  result  in  the asterisks being converted to a
              list of files in the current directory and  that  list  used  to
              delete entries from the archive.

              Under  MSDOS,  [1m-d [22mis case sensitive when it matches names in the
              [4mzip[24m archive.  This requires that file names be entered in  upper
              case  if they were zipped by PKZIP on an MSDOS system.  (We con‚Äê
              sidered making this case insensitive on systems where paths were
              case  insensitive,  but  it  is possible the archive came from a
              system where case does matter and the archive could include both
              [1mBar  [22mand [1mbar [22mas separate files in the archive.)  But see the new
              option [1m-ic [22mto ignore case in the archive.

       [1m-db[0m
       [1m--display-bytes[0m
              Display running byte counts showing the  bytes  zipped  and  the
              bytes to go.

       [1m-dc[0m
       [1m--display-counts[0m
              Display running count of entries zipped and entries to go.

       [1m-dd[0m
       [1m--display-dots[0m
              Display  dots  while  each entry is zipped (except on ports that
              have their own progress indicator).  See [1m-ds [22mbelow  for  setting
              dot  size.   The default is a dot every 10 MB of input file pro‚Äê
              cessed.  The [1m-v [22moption also displays dots (previously at a  much
              higher  rate  than  this  but now [1m-v [22malso defaults to 10 MB) and
              this rate is also controlled by [1m-ds[22m.

       [1m-df[0m
       [1m--datafork[0m
              [MacOS] Include only data-fork of files zipped into the archive.
              Good   for   exporting   files   to  foreign  operating-systems.
              Resource-forks will be ignored at all.

       [1m-dg[0m
       [1m--display-globaldots[0m
              Display progress dots for the archive instead of for each  file.
              The command

                         zip -qdgds 10m

              will turn off most output except dots every 10 MB.

       [1m-ds [22msize
       [1m--dot-size [22msize
              Set  amount of input file processed for each dot displayed.  See
              [1m-dd [22mto enable displaying dots.  Setting this option implies [1m-dd[22m.
              Size  is  in the format nm where n is a number and m is a multi‚Äê
              plier.  Currently m can be k (KB), m (MB), g (GB), or t (TB), so
              if n is 100 and m is k, size would be 100k which is 100 KB.  The
              default is 10 MB.

              The [1m-v [22moption also displays dots and now defaults to 10 MB also.
              This  rate is also controlled by this option.  A size of 0 turns
              dots off.

              This option does not control the dots from the "Scanning  files"
              message  as [4mzip[24m scans for input files.  The dot size for that is
              fixed at 2 seconds or a fixed number of  entries,  whichever  is
              longer.

       [1m-du[0m
       [1m--display-usize[0m
              Display the uncompressed size of each entry.

       [1m-dv[0m
       [1m--display-volume[0m
              Display  the volume (disk) number each entry is being read from,
              if reading an existing archive, and being written to.

       [1m-D[0m
       [1m--no-dir-entries[0m
              Do not create  entries  in  the  [4mzip[24m  archive  for  directories.
              Directory   entries   are  created  by  default  so  that  their
              attributes can be saved in the  zip  archive.   The  environment
              variable  ZIPOPT  can be used to change the default options. For
              example under Unix with sh:

                     ZIPOPT="-D"; export ZIPOPT

              (The variable ZIPOPT can be used for any  option,  including  [1m-i[0m
              and [1m-x [22musing a new option format detailed below, and can include
              several options.) The option [1m-D [22mis a shorthand for [1m-x  [22m"*/"  but
              the  latter previously could not be set as default in the ZIPOPT
              environment variable as the contents  of  ZIPOPT  gets  inserted
              near  the beginning of the command line and the file list had to
              end at the end of the line.

              This version of [4mzip[24m does allow [1m-x [22mand [1m-i [22moptions  in  ZIPOPT  if
              the form

               [1m-x [22mfile file ... [1m@[0m

              is used, where the @ (an argument that is just @) terminates the
              list.

       [1m-DF[0m
       [1m--difference-archive[0m
              Create an archive that contains all new and changed files  since
              the  original  archive was created.  For this to work, the input
              file list and current directory must be the same as  during  the
              original [4mzip[24m operation.

              For example, if the existing archive was created using

                     zip -r foofull .

              from the [4mbar[24m directory, then the command

                     zip -r foofull . -DF --out foonew

              also from the [4mbar[24m directory creates the archive [4mfoonew[24m with just
              the files not in [4mfoofull[24m and the files where the  size  or  file
              time of the files do not match those in [4mfoofull[24m.

              Note  that  the  timezone  environment variable TZ should be set
              according to the local timezone in order for this option to work
              correctly.   A change in timezone since the original archive was
              created could result in no times matching and  all  files  being
              included.

              A possible approach to backing up a directory might be to create
              a normal archive of the contents of  the  directory  as  a  full
              backup, then use this option to create incremental backups.

       [1m-e[0m
       [1m--encrypt[0m
              Encrypt  the  contents of the [4mzip[24m archive using a password which
              is entered on the terminal in response to a  prompt  (this  will
              not  be  echoed;  if  standard error is not a tty, [4mzip[24m will exit
              with an error).  The password prompt is  repeated  to  save  the
              user from typing errors.

       [1m-E[0m
       [1m--longnames[0m
              [OS/2]  Use the .LONGNAME Extended Attribute (if found) as file‚Äê
              name.

       [1m-f[0m
       [1m--freshen[0m
              Replace (freshen) an existing entry in the [4mzip[24m archive  only  if
              it  has  been modified more recently than the version already in
              the [4mzip[24m archive; unlike the update option ([1m-u[22m) this will not add
              files that are not already in the [4mzip[24m archive.  For example:

                     zip -f foo

              This  command  should  be run from the same directory from which
              the original [4mzip[24m command was run, since paths stored in [4mzip[24m  ar‚Äê
              chives are always relative.

              Note  that  the  timezone  environment variable TZ should be set
              according to the local timezone in order for the [1m-f[22m, [1m-u  [22mand  [1m-o[0m
              options to work correctly.

              The  reasons behind this are somewhat subtle but have to do with
              the differences between the Unix-format file  times  (always  in
              GMT) and most of the other operating systems (always local time)
              and the necessity to compare the two.  A  typical  TZ  value  is
              ``MET-1MEST''  (Middle  European  time with automatic adjustment
              for ``summertime'' or Daylight Savings Time).

              The format is TTThhDDD, where TTT is the time zone such as  MET,
              hh  is  the  difference  between  GMT  and local time such as -1
              above, and DDD is the time zone when daylight savings time is in
              effect.  Leave off the DDD if there is no daylight savings time.
              For the US Eastern time zone EST5EDT.

       [1m-F[0m
       [1m--fix[0m
       [1m-FF[0m
       [1m--fixfix[0m
              Fix the [4mzip[24m archive. The [1m-F [22moption can be used if some  portions
              of  the  archive  are  missing, but requires a reasonably intact
              central directory.  The input archive is scanned as  usual,  but
              [4mzip[24m  will ignore some problems.  The resulting archive should be
              valid, but any inconsistent entries will be left out.

              When doubled as in [1m-FF[22m, the archive is scanned from  the  begin‚Äê
              ning and [4mzip[24m scans for special signatures to identify the limits
              between the archive members. The single [1m-F [22mis more  reliable  if
              the archive is not too much damaged, so try this option first.

              If the archive is too damaged or the end has been truncated, you
              must use [1m-FF[22m.  This is a change  from  [4mzip[24m [4m2.32[24m,  where  the  [1m-F[0m
              option  is  able to read a truncated archive.  The [1m-F [22moption now
              more reliably fixes archives  with  minor  damage  and  the  [1m-FF[0m
              option is needed to fix archives where [1m-F [22mmight have been suffi‚Äê
              cient before.

              Neither option will recover archives that have been  incorrectly
              transferred  in  ascii mode instead of binary. After the repair,
              the [1m-t [22moption of [4munzip[24m may show that some files have a bad  CRC.
              Such files cannot be recovered; you can remove them from the ar‚Äê
              chive using the [1m-d [22moption of [4mzip[24m.

              Note that [1m-FF [22mmay have trouble fixing archives that  include  an
              embedded  zip  archive  that was stored (without compression) in
              the archive and, depending  on  the  damage,  it  may  find  the
              entries  in the embedded archive rather than the archive itself.
              Try [1m-F [22mfirst as it does not have this problem.

              The format of the fix commands have changed.   For  example,  to
              fix the damaged archive [4mfoo.zip[24m,

                     zip -F foo --out foofix

              tries  to read the entries normally, copying good entries to the
              new archive [4mfoofix.zip[24m.  If this doesn't work, as when  the  ar‚Äê
              chive  is  truncated, or if some entries you know are in the ar‚Äê
              chive are missed, then try

                     zip -FF foo --out foofixfix

              and compare the resulting archive to the archive created by  [1m-F[22m.
              The [1m-FF [22moption may create an inconsistent archive.  Depending on
              what is damaged, you can then use the [1m-F [22moption to fix that  ar‚Äê
              chive.

              A  split  archive with missing split files can be fixed using [1m-F[0m
              if you have the last split of the archive (the [1m.zip  [22mfile).   If
              this file is missing, you must use [1m-FF [22mto fix the archive, which
              will prompt you for the splits you have.

              Currently the fix options can't recover entries that have a  bad
              checksum or are otherwise damaged.

       [1m-FI[0m
       [1m--fifo [22m[Unix]   Normally  [4mzip[24m  skips  reading  any  FIFOs (named pipes)
              encountered, as [4mzip[24m can hang if the FIFO is not being fed.  This
              option tells [4mzip[24m to read the contents of any FIFO it finds.

       [1m-FS[0m
       [1m--filesync[0m
              Synchronize the contents of an archive with the files on the OS.
              Normally when an archive is updated, new  files  are  added  and
              changed  files are updated but files that no longer exist on the
              OS are not deleted from the archive.  This option enables a  new
              mode that checks entries in the archive against the file system.
              If the file time and file size of the entry matches that of  the
              OS  file,  the  entry  is copied from the old archive instead of
              being read from the file system and compressed.  If the OS  file
              has  changed, the entry is read and compressed as usual.  If the
              entry in the archive does not match a file on the OS, the  entry
              is  deleted.   Enabling  this option should create archives that
              are the same as new archives, but  since  existing  entries  are
              copied  instead of compressed, updating an existing archive with
              [1m-FS [22mcan be much faster than creating a new archive.   Also  con‚Äê
              sider using [1m-u [22mfor updating an archive.

              For  this option to work, the archive should be updated from the
              same directory it was created in so the  relative  paths  match.
              If  few  files  are being copied from the old archive, it may be
              faster to create a new archive instead.

              Note that the timezone environment variable  TZ  should  be  set
              according to the local timezone in order for this option to work
              correctly.  A change in timezone since the original archive  was
              created  could  result in no times matching and recompression of
              all files.

              This option deletes files from the archive.  If you need to pre‚Äê
              serve  the original archive, make a copy of the archive first or
              use the [1m--out [22moption to output the  updated  archive  to  a  new
              file.  Even though it may be slower, creating a new archive with
              a new archive name is safer, avoids mismatches  between  archive
              and OS paths, and is preferred.

       [1m-g[0m
       [1m--grow[0m
              Grow  (append to) the specified [4mzip[24m archive, instead of creating
              a new one. If this operation fails, [4mzip[24m attempts to restore  the
              archive to its original state. If the restoration fails, the ar‚Äê
              chive might  become  corrupted.  This  option  is  ignored  when
              there's  no existing archive or when at least one archive member
              must be updated or deleted.

       [1m-h[0m
       [1m-?[0m
       [1m--help[0m
              Display the [4mzip[24m help information (this also appears  if  [4mzip[24m  is
              run with no arguments).

       [1m-h2[0m
       [1m--more-help[0m
              Display  extended  help  including  more on command line format,
              pattern matching, and more obscure options.

       [1m-i [22mfiles
       [1m--include [22mfiles
              Include only the specified files, as in:

                     zip -r foo . -i \*.c

              which will include only the files that end in .c in the  current
              directory  and  its  subdirectories.  (Note for PKZIP users: the
              equivalent command is

                     pkzip -rP foo *.c

              PKZIP does not allow recursion in  directories  other  than  the
              current one.)  The backslash avoids the shell filename substitu‚Äê
              tion, so that the name matching  is  performed  by  [4mzip[24m  at  all
              directory  levels.   [This is for Unix and other systems where \
              escapes the next character.  For other systems where  the  shell
              does not process * do not use \ and the above is

                     zip -r foo . -i *.c

              Examples  are  for  Unix  unless  otherwise  specified.]   So to
              include dir, a directory directly under the  current  directory,
              use

                     zip -r foo . -i dir/\*

              or

                     zip -r foo . -i "dir/*"

              to  match paths such as dir/a and dir/b/file.c [on ports without
              wildcard expansion in the shell such as MSDOS and Windows

                     zip -r foo . -i dir/*

              is used.]  Note that currently the  trailing  /  is  needed  for
              directories (as in

                     zip -r foo . -i dir/

              to include directory dir).

              The long option form of the first example is

                     zip -r foo . --include \*.c

              and does the same thing as the short option form.

              Though  the  command syntax used to require [1m-i [22mat the end of the
              command line, this version actually  allows  [1m-i  [22m(or  [1m--include[22m)
              anywhere.   The  list  of  files terminates at the next argument
              starting with [1m-[22m, the end of the command line, or the list termi‚Äê
              nator [1m@ [22m(an argument that is just @).  So the above can be given
              as

                     zip -i \*.c @ -r foo .

              for example.  There must be a space between the option  and  the
              first  file of a list.  For just one file you can use the single
              value form

                     zip -i\*.c -r foo .

              (no space between option and value) or

                     zip --include=\*.c -r foo .

              as additional examples.  The single value forms are  not  recom‚Äê
              mended  because  they  can  be confusing and, in particular, the
              [1m-ifile [22mformat can cause problems if the  first  letter  of  [1mfile[0m
              combines  with  [1mi  [22mto  form a two-letter option starting with [1mi[22m.
              Use [1m-sc [22mto see how your command line will be parsed.

              Also possible:

                     zip -r foo  . -i@include.lst

              which will only include the files in the current  directory  and
              its   subdirectories   that  match  the  patterns  in  the  file
              include.lst.

              Files to [1m-i [22mand [1m-x [22mare patterns matching internal archive paths.
              See [1m-R [22mfor more on patterns.

       [1m-I[0m
       [1m--no-image[0m
              [Acorn  RISC OS] Don't scan through Image files.  When used, [4mzip[0m
              will not consider Image files (eg. DOS partitions or  Spark  ar‚Äê
              chives  when  SparkFS  is  loaded) as directories but will store
              them as single files.

              For example, if you have SparkFS loaded, zipping a Spark archive
              will  result  in  a zipfile containing a directory (and its con‚Äê
              tent) while using the 'I' option will result in a  zipfile  con‚Äê
              taining a Spark archive. Obviously this second case will also be
              obtained (without the 'I' option) if SparkFS isn't loaded.

       [1m-ic[0m
       [1m--ignore-case[0m
              [VMS, WIN32] Ignore case when matching  archive  entries.   This
              option  is  only available on systems where the case of files is
              ignored.  On systems with case-insensitive file systems, case is
              normally  ignored  when matching files on the file system but is
              not ignored for -f (freshen), -d (delete), -U (copy), and  simi‚Äê
              lar  modes  when  matching against archive entries (currently -f
              ignores case on VMS) because archive entries can be from systems
              where  case  does  matter and names that are the same except for
              case can exist in an archive.  The [1m-ic [22moption makes all matching
              case  insensitive.   This can result in multiple archive entries
              matching a command line pattern.

       [1m-j[0m
       [1m--junk-paths[0m
              Store just the name of a saved file (junk the path), and do  not
              store  directory names. By default, [4mzip[24m will store the full path
              (relative to the current directory).

       [1m-jj[0m
       [1m--absolute-path[0m
              [MacOS] record Fullpath (+ Volname). The complete path including
              volume  will  be  stored.  By  default the relative path will be
              stored.

       [1m-J[0m
       [1m--junk-sfx[0m
              Strip any prepended data (e.g. a SFX stub) from the archive.

       [1m-k[0m
       [1m--DOS-names[0m
              Attempt to convert the names and  paths  to  conform  to  MSDOS,
              store  only  the  MSDOS attribute (just the user write attribute
              from Unix), and mark the entry as made under MSDOS (even  though
              it  was  not);  for compatibility with PKUNZIP under MSDOS which
              cannot handle certain names such as those with two dots.

       [1m-l[0m
       [1m--to-crlf[0m
              Translate the Unix end-of-line character LF into the MSDOS  con‚Äê
              vention  CR  LF. This option should not be used on binary files.
              This option can be used on Unix if the zip file is intended  for
              PKUNZIP  under  MSDOS. If the input files already contain CR LF,
              this option adds an extra CR. This is to ensure that [1munzip -a [22mon
              Unix  will  get back an exact copy of the original file, to undo
              the effect of [1mzip -l[22m.  See [1m-ll [22mfor how binary files are handled.

       [1m-la[0m
       [1m--log-append[0m
              Append to existing logfile.  Default is to overwrite.

       [1m-lf [22mlogfilepath
       [1m--logfile-path [22mlogfilepath
              Open a logfile at the given path.  By default any existing  file
              at  that location is overwritten, but the [1m-la [22moption will result
              in an existing file being opened and  the  new  log  information
              appended  to any existing information.  Only warnings and errors
              are written to the log unless the [1m-li [22moption is also given, then
              all information messages are also written to the log.

       [1m-li[0m
       [1m--log-info[0m
              Include  information  messages, such as file names being zipped,
              in the log.  The default is to only include  the  command  line,
              any warnings and errors, and the final status.

       [1m-ll[0m
       [1m--from-crlf[0m
              Translate the MSDOS end-of-line CR LF into Unix LF.  This option
              should not be used on binary files.  This option can be used  on
              MSDOS  if the zip file is intended for unzip under Unix.  If the
              file is converted and the file is later determined to be  binary
              a warning is issued and the file is probably corrupted.  In this
              release if [1m-ll [22mdetects binary in the first buffer  read  from  a
              file,  [4mzip[24m now issues a warning and skips line end conversion on
              the file.  This check seems to catch all  binary  files  tested,
              but  the original check remains and if a converted file is later
              determined to be binary that warning is  still  issued.   A  new
              algorithm  is  now  being  used for binary detection that should
              allow line end conversion of text files  in  [1mUTF-8  [22mand  similar
              encodings.

       [1m-L[0m
       [1m--license[0m
              Display the [4mzip[24m license.

       [1m-m[0m
       [1m--move[0m
              Move  the  specified  files into the [4mzip[24m archive; actually, this
              deletes the target directories/files after making the  specified
              [4mzip[24m  archive.  If a directory becomes empty after removal of the
              files, the directory is also  removed.  No  deletions  are  done
              until [4mzip[24m has created the archive without error.  This is useful
              for conserving disk space, but is potentially dangerous so it is
              recommended to use it in combination with [1m-T [22mto test the archive
              before removing all input files.

       [1m-MM[0m
       [1m--must-match[0m
              All input patterns must match at least one file  and  all  input
              files  found  must  be readable.  Normally when an input pattern
              does not match a file the "name not matched" warning  is  issued
              and  when  an  input file has been found but later is missing or
              not readable a missing or not readable warning  is  issued.   In
              either  case [4mzip[24m continues creating the archive, with missing or
              unreadable new files being skipped and files already in the  ar‚Äê
              chive remaining unchanged.  After the archive is created, if any
              files were not readable [4mzip[24m returns the OPEN error code  (18  on
              most  systems)  instead  of the normal success return (0 on most
              systems).  With [1m-MM [22mset, [4mzip[24m exits as soon as an  input  pattern
              is not matched (whenever the "name not matched" warning would be
              issued) or when an input file is not readable.  In  either  case
              [4mzip[24m exits with an OPEN error and no archive is created.

              This option is useful when a known list of files is to be zipped
              so any missing or unreadable files will result in an error.   It
              is less useful when used with wildcards, but [4mzip[24m will still exit
              with an error if any input pattern doesn't match  at  least  one
              file  and  if  any matched files are unreadable.  If you want to
              create the archive anyway and only need to know  if  files  were
              skipped, don't use [1m-MM [22mand just check the return code.  Also [1m-lf[0m
              could be useful.

       [1m-n [22msuffixes
       [1m--suffixes [22msuffixes
              Do not attempt to compress files named with the given  [1msuffixes[22m.
              Such  files are simply stored (0% compression) in the output zip
              file, so that [4mzip[24m doesn't waste  its  time  trying  to  compress
              them.   The  suffixes  are  separated  by either colons or semi‚Äê
              colons.  For example:

                     zip -rn .Z:.zip:.tiff:.gif:.snd  foo foo

              will copy everything from [4mfoo[24m into [4mfoo.zip[24m, but will  store  any
              files  that end in [4m.Z[24m, [4m.zip[24m, [4m.tiff[24m, [4m.gif[24m, or [4m.snd[24m without trying
              to compress them (image and sound files  often  have  their  own
              specialized compression methods).  By default, [4mzip[24m does not com‚Äê
              press     files     with     extensions     in     the      list
              [4m.Z:.zip:.zoo:.arc:.lzh:.arj.[24m   Such files are stored directly in
              the output archive.  The environment variable ZIPOPT can be used
              to change the default options. For example under Unix with csh:

                     setenv ZIPOPT "-n .gif:.zip"

              To attempt compression on all files, use:

                     zip -n : foo

              The  maximum  compression option [1m-9 [22malso attempts compression on
              all files regardless of extension.

              On Acorn RISC OS systems the suffixes are actually filetypes  (3
              hex  digit format). By default, [4mzip[24m does not compress files with
              filetypes in the list DDC:D96:68E (i.e. Archives, CFS files  and
              PackDir files).

       [1m-nw[0m
       [1m--no-wild[0m
              Do not perform internal wildcard processing (shell processing of
              wildcards is still done by the shell unless  the  arguments  are
              escaped).   Useful if a list of paths is being read and no wild‚Äê
              card substitution is desired.

       [1m-N[0m
       [1m--notes[0m
              [Amiga, MacOS] Save Amiga or MacOS  filenotes  as  zipfile  com‚Äê
              ments.  They can be restored by using the -N option of [4munzip[24m. If
              -c is used also, you are prompted for comments  only  for  those
              files that do not have filenotes.

       [1m-o[0m
       [1m--latest-time[0m
              Set  the  "last  modified" time of the [4mzip[24m archive to the latest
              (oldest) "last modified" time found among the entries in the [4mzip[0m
              archive.   This  can  be  used  without any other operations, if
              desired.  For example:

              zip -o foo

              will change the last modified time of [1mfoo.zip [22mto the latest time
              of the entries in [1mfoo.zip[22m.

       [1m-O [22moutput-file
       [1m--output-file [22moutput-file
              Process  the  archive  changes as usual, but instead of updating
              the existing archive, output the  new  archive  to  output-file.
              Useful for updating an archive without changing the existing ar‚Äê
              chive and the input archive must be a different  file  than  the
              output archive.

              This  option  can  be used to create updated split archives.  It
              can also be used with [1m-U [22mto copy entries from  an  existing  ar‚Äê
              chive to a new archive.  See the [1mEXAMPLES [22msection below.

              Another  use  is  converting  [4mzip[24m  files  from one split size to
              another.  For instance, to convert an archive  with  700  MB  CD
              splits to one with 2 GB DVD splits, can use:

                     zip -s 2g cd-split.zip --out dvd-split.zip

              which uses copy mode.  See [1m-U [22mbelow.  Also:

                     zip -s 0 split.zip --out unsplit.zip

              will convert a split archive to a single-file archive.

              Copy  mode  will  convert stream entries (using data descriptors
              and which should be  compatible  with  most  unzips)  to  normal
              entries  (which should be compatible with all unzips), except if
              standard encryption  was  used.   For  archives  with  encrypted
              entries,  [4mzipcloak[24m  will decrypt the entries and convert them to
              normal entries.

       [1m-p[0m
       [1m--paths[0m
              Include relative file paths as part of the names of files stored
              in  the  archive.  This is the default.  The [1m-j [22moption junks the
              paths and just stores the names of the files.

       [1m-P [22mpassword
       [1m--password [22mpassword
              Use [4mpassword[24m to encrypt zipfile entries (if any).  [1mTHIS IS INSE‚Äê[0m
              [1mCURE!   [22mMany  multi-user  operating systems provide ways for any
              user to see the current command line of any other user; even  on
              stand-alone  systems  there  is  always  the threat of over-the-
              shoulder peeking.  Storing the plaintext password as part  of  a
              command  line  in  an  automated script is even worse.  Whenever
              possible, use the non-echoing, interactive prompt to enter pass‚Äê
              words.   (And  where  security  is  truly  important, use strong
              encryption such as Pretty Good Privacy instead of the relatively
              weak standard encryption provided by zipfile utilities.)

       [1m-q[0m
       [1m--quiet[0m
              Quiet   mode;   eliminate  informational  messages  and  comment
              prompts.  (Useful, for example, in shell scripts and  background
              tasks).

       [1m-Q[22mn
       [1m--Q-flag [22mn
              [QDOS]  store information about the file in the file header with
              n defined as
              bit  0: Don't add headers for any file
              bit  1: Add headers for all files
              bit  2: Don't wait for interactive key press on exit

       [1m-r[0m
       [1m--recurse-paths[0m
              Travel the directory structure recursively; for example:

                     zip -r foo.zip foo

              or more concisely

                     zip -r foo foo

              In this case, all the files and directories in [1mfoo [22mare saved  in
              a [4mzip[24m archive named [1mfoo.zip[22m, including files with names starting
              with [1m"."[22m, since the recursion does not use the shell's file-name
              substitution  mechanism.  If you wish to include only a specific
              subset of the files in directory [1mfoo [22mand its subdirectories, use
              the  [1m-i  [22moption  to specify the pattern of files to be included.
              You should not use [1m-r [22mwith the name  [1m".*"[22m,  since  that  matches
              [1m".."   [22mwhich will attempt to zip up the parent directory (proba‚Äê
              bly not what was intended).

              Multiple source directories are allowed as in

                     zip -r foo foo1 foo2

              which first zips up [1mfoo1 [22mand then [1mfoo2[22m, going down  each  direc‚Äê
              tory.

              Note  that  while  wildcards  to [1m-r [22mare typically resolved while
              recursing down directories in the file system, any [1m-R,  -x[22m,  and
              [1m-i  [22mwildcards are applied to internal archive pathnames once the
              directories are scanned.  To have wildcards apply  to  files  in
              subdirectories  when recursing on Unix and similar systems where
              the shell does wildcard substitution, either  escape  all  wild‚Äê
              cards  or put all arguments with wildcards in quotes.  This lets
              [4mzip[24m see the wildcards and match files  in  subdirectories  using
              them as it recurses.

       [1m-R[0m
       [1m--recurse-patterns[0m
              Travel  the directory structure recursively starting at the cur‚Äê
              rent directory; for example:

                     zip -R foo "*.c"

              In this case, all the files matching [1m*.c [22min the tree starting at
              the  current  directory  are  stored  into  a  [4mzip[24m archive named
              [1mfoo.zip[22m.  Note that [1m*.c [22mwill match [1mfile.c[22m, [1ma/file.c [22mand  [1ma/b/.c[22m.
              More than one pattern can be listed as separate arguments.  Note
              for PKZIP users: the equivalent command is

                     pkzip -rP foo *.c

              Patterns are relative file paths as they appear in the  archive,
              or  will after zipping, and can have optional wildcards in them.
              For example, given the current directory is [1mfoo [22mand under it are
              directories [1mfoo1 [22mand [1mfoo2 [22mand in [1mfoo1 [22mis the file [1mbar.c[22m,

                     zip -R foo/*

              will zip up [1mfoo[22m, [1mfoo/foo1[22m, [1mfoo/foo1/bar.c[22m, and [1mfoo/foo2[22m.

                     zip -R */bar.c

              will  zip  up  [1mfoo/foo1/bar.c[22m.   See the note for [1m-r [22mon escaping
              wildcards.

       [1m-RE[0m
       [1m--regex[0m
              [WIN32]  Before [4mzip[24m [4m3.0[24m, regular expression  list  matching  was
              enabled  by  default on Windows platforms.  Because of confusion
              resulting from the need to escape "[" and "]" in  names,  it  is
              now  off  by  default for Windows so "[" and "]" are just normal
              characters in names.  This option enables [] matching again.

       [1m-s [22msplitsize
       [1m--split-size [22msplitsize
              Enable creating a split archive and set the split size.  A split
              archive  is  an archive that could be split over many files.  As
              the archive is created, if the size of the archive  reaches  the
              specified  split  size,  that split is closed and the next split
              opened.  In general all splits but the last will  be  the  split
              size  and  the last will be whatever is left.  If the entire ar‚Äê
              chive is smaller than the split size a  single-file  archive  is
              created.

              Split  archives  are  stored in numbered files.  For example, if
              the output  archive  is  named  [1marchive  [22mand  three  splits  are
              required,  the  resulting archive will be in the three files [1mar‚Äê[0m
              [1mchive.z01[22m, [1marchive.z02[22m, and [1marchive.zip[22m.  Do not change the num‚Äê
              bering  of  these  files  or the archive will not be readable as
              these are used to determine the order the splits are read.

              Split size is a number  optionally  followed  by  a  multiplier.
              Currently  the  number  must  be an integer.  The multiplier can
              currently be one of [1mk [22m(kilobytes), [1mm [22m(megabytes), [1mg [22m(gigabytes),
              or  [1mt  [22m(terabytes).   As  64k is the minimum split size, numbers
              without multipliers default to megabytes.  For example, to  cre‚Äê
              ate  a  split  archive  called  [1mfoo [22mwith the contents of the [1mbar[0m
              directory with splits of 670 MB that might be useful for burning
              on CDs, the command:

                     zip -s 670m -r foo bar

              could be used.

              Currently  the  old  splits  of a split archive are not excluded
              from a new archive, but they can be specifically  excluded.   If
              possible,  keep  the  input  and output archives out of the path
              being zipped when creating split archives.

              Using [1m-s [22mwithout [1m-sp [22mas above creates all the splits  where  [1mfoo[0m
              is  being  written,  in  this  case the current directory.  This
              split mode updates the splits as the archive is  being  created,
              requiring  all  splits to remain writable, but creates split ar‚Äê
              chives that are readable by any unzip that  supports  split  ar‚Äê
              chives.   See  [1m-sp  [22mbelow  for  enabling  split pause mode which
              allows splits to be written directly to removable media.

              The option [1m-sv [22mcan be used to enable verbose splitting and  pro‚Äê
              vide details of how the splitting is being done.  The [1m-sb [22moption
              can be used to ring the bell when [4mzip[24m pauses for the next  split
              destination.

              Split  archives cannot be updated, but see the [1m-O [22m([1m--out[22m) option
              for how a split archive can be updated as it is copied to a  new
              archive.   A  split archive can also be converted into a single-
              file archive using a split size of 0 or negating the [1m-s [22moption:

                     zip -s 0 split.zip --out single.zip

              Also see [1m-U [22m([1m--copy[22m) for more on using copy mode.

       [1m-sb[0m
       [1m--split-bell[0m
              If splitting and using split pause mode, ring the bell when  [4mzip[0m
              pauses for each split destination.

       [1m-sc[0m
       [1m--show-command[0m
              Show  the  command line starting [4mzip[24m as processed and exit.  The
              new command parser permutes the arguments, putting  all  options
              and  any values associated with them before any non-option argu‚Äê
              ments.  This allows an option to appear anywhere in the  command
              line  as  long as any values that go with the option go with it.
              This option displays the command line as [4mzip[24m sees it,  including
              any arguments from the environment such as from the [1mZIPOPT [22mvari‚Äê
              able.  Where allowed, options later  in  the  command  line  can
              override options earlier in the command line.

       [1m-sf[0m
       [1m--show-files[0m
              Show  the  files  that  would  be  operated  on, then exit.  For
              instance, if creating a new archive, this will  list  the  files
              that  would  be  added.   If the option is negated, [1m-sf-[22m, output
              only to an open log file.  Screen display is not recommended for
              large lists.

       [1m-so[0m
       [1m--show-options[0m
              Show  all  available options supported by [4mzip[24m as compiled on the
              current system.  As this command  reads  the  option  table,  it
              should include all options.  Each line includes the short option
              (if defined), the long option (if defined), the  format  of  any
              value  that  goes with the option, if the option can be negated,
              and a small description.  The value  format  can  be  no  value,
              required  value,  optional value, single character value, number
              value, or a list of values.  The output of this  option  is  not
              intended  to  show  how  to  use  any  option but only show what
              options are available.

       [1m-sp[0m
       [1m--split-pause[0m
              If splitting is enabled with [1m-s[22m, enable split pause mode.   This
              creates split archives as [1m-s [22mdoes, but stream writing is used so
              each split can be closed as soon as it is written and  [4mzip[24m  will
              pause  between each split to allow changing split destination or
              media.

              Though this split mode allows writing splits directly to  remov‚Äê
              able  media, it uses stream archive format that may not be read‚Äê
              able by some unzips.  Before relying on splits created with [1m-sp[22m,
              test a split archive with the unzip you will be using.

              To  convert a stream split archive (created with [1m-sp[22m) to a stan‚Äê
              dard archive see the [1m--out [22moption.

       [1m-su[0m
       [1m--show-unicode[0m
              As [1m-sf[22m, but also show Unicode version of the path if exists.

       [1m-sU[0m
       [1m--show-just-unicode[0m
              As [1m-sf[22m, but only show Unicode version of  the  path  if  exists,
              otherwise show the standard version of the path.

       [1m-sv[0m
       [1m--split-verbose[0m
              Enable various verbose messages while splitting, showing how the
              splitting is being done.

       [1m-S[0m
       [1m--system-hidden[0m
              [MSDOS, OS/2, WIN32 and ATARI] Include system and hidden files.
              [MacOS] Includes finder invisible files, which are ignored  oth‚Äê
              erwise.

       [1m-t [22mmmddyyyy
       [1m--from-date [22mmmddyyyy
              Do  not  operate  on files modified prior to the specified date,
              where [1mmm [22mis the month (00-12),  [1mdd  [22mis  the  day  of  the  month
              (01-31),  and  [1myyyy  [22mis  the  year.   The  [4mISO[24m [4m8601[24m  date format
              [1myyyy-mm-dd [22mis also accepted.  For example:

                     zip -rt 12071991 infamy foo

                     zip -rt 1991-12-07 infamy foo

              will add all the files in [1mfoo [22mand its subdirectories  that  were
              last  modified  on  or after 7 December 1991, to the [4mzip[24m archive
              [1minfamy.zip[22m.

       [1m-tt [22mmmddyyyy
       [1m--before-date [22mmmddyyyy
              Do not operate on files modified after or at the specified date,
              where  [1mmm  [22mis  the  month  (00-12),  [1mdd  [22mis the day of the month
              (01-31), and  [1myyyy  [22mis  the  year.   The  [4mISO[24m [4m8601[24m  date  format
              [1myyyy-mm-dd [22mis also accepted.  For example:

                     zip -rtt 11301995 infamy foo

                     zip -rtt 1995-11-30 infamy foo

              will  add  all the files in [1mfoo [22mand its subdirectories that were
              last modified before  30  November  1995,  to  the  [4mzip[24m  archive
              [1minfamy.zip[22m.

       [1m-T[0m
       [1m--test[0m
              Test  the integrity of the new zip file. If the check fails, the
              old zip file is unchanged and (with  the  [1m-m  [22moption)  no  input
              files are removed.

       [1m-TT [22mcmd
       [1m--unzip-command [22mcmd
              Use  command cmd instead of 'unzip -tqq' to test an archive when
              the [1m-T [22moption is used.  On Unix, to use a copy of unzip  in  the
              current  directory  instead  of the standard system unzip, could
              use:

               zip archive file1 file2 -T -TT "./unzip -tqq"

              In cmd, {} is replaced by the name  of  the  temporary  archive,
              otherwise  the name of the archive is appended to the end of the
              command.  The return code is checked for success (0 on Unix).

       [1m-u[0m
       [1m--update[0m
              Replace (update) an existing entry in the [4mzip[24m archive only if it
              has  been modified more recently than the version already in the
              [4mzip[24m archive.  For example:

                     zip -u stuff *

              will add any new files in the current directory, and update  any
              files  which  have been modified since the [4mzip[24m archive [4mstuff.zip[0m
              was last created/modified (note that [4mzip[24m will not  try  to  pack
              [4mstuff.zip[24m into itself when you do this).

              Note  that  the [1m-u [22moption with no input file arguments acts like
              the [1m-f [22m(freshen) option.

       [1m-U[0m
       [1m--copy-entries[0m
              Copy entries from one archive to another.   Requires  the  [1m--out[0m
              option  to  specify  a  different output file than the input ar‚Äê
              chive.  Copy mode is the reverse of [1m-d [22mdelete.  When  delete  is
              being used with [1m--out[22m, the selected entries are deleted from the
              archive and all other entries are copied  to  the  new  archive,
              while copy mode selects the files to include in the new archive.
              Unlike [1m-u [22mupdate, input patterns on the command line are matched
              against archive entries only and not the file system files.  For
              instance,

                     zip inarchive "*.c" --copy --out outarchive

              copies entries with names ending in [1m.c [22mfrom  [1minarchive  [22mto  [1mout‚Äê[0m
              [1marchive[22m.   The  wildcard must be escaped on some systems to pre‚Äê
              vent the shell from substituting names of files  from  the  file
              system  which  may  have  no relevance to the entries in the ar‚Äê
              chive.

              If no input files appear on the command line and [1m--out [22mis  used,
              copy mode is assumed:

                     zip inarchive --out outarchive

              This is useful for changing split size for instance.  Encrypting
              and decrypting entries is not yet  supported  using  copy  mode.
              Use [4mzipcloak[24m for that.

       [1m-UN [22mv
       [1m--unicode [22mv
              Determine  what [4mzip[24m should do with Unicode file names.  [4mzip[24m [4m3.0[24m,
              in addition to the standard file path, now  includes  the  UTF-8
              translation  of the path if the entry path is not entirely 7-bit
              ASCII.  When an entry is missing the Unicode path,  [4mzip[24m  reverts
              back  to  the  standard  file  path.  The problem with using the
              standard path is this path is in the local character set of  the
              zip  that  created  the entry, which may contain characters that
              are not valid in the character set  being  used  by  the  unzip.
              When  [4mzip[24m  is reading an archive, if an entry also has a Unicode
              path, [4mzip[24m now defaults to using the Unicode path to recreate the
              standard path using the current local character set.

              This  option  can  be  used to determine what [4mzip[24m should do with
              this path if there is a mismatch  between  the  stored  standard
              path and the stored UTF-8 path (which can happen if the standard
              path was updated).  In all cases, if there is a mismatch  it  is
              assumed  that  the  standard  path  is more current and [4mzip[24m uses
              that.  Values for [1mv [22mare

                     q - quit if paths do not match

                     w - warn, continue with standard path

                     i - ignore, continue with standard path

                     n - no Unicode, do not use Unicode paths

              The default is to warn and continue.

              Characters that are not valid in the current character  set  are
              escaped  as  [1m#Uxxxx  [22mand [1m#Lxxxxxx[22m, where x is an ASCII character
              for a hex digit.  The first is used if a 16-bit character number
              is  sufficient to represent the Unicode character and the second
              if the character needs more than 16 bits to represent it's  Uni‚Äê
              code character code.  Setting [1m-UN [22mto

                     e - escape

              as in

                     zip archive -sU -UN=e

              forces [4mzip[24m to escape all characters that are not printable 7-bit
              ASCII.

              Normally [4mzip[24m stores UTF-8 directly in the standard path field on
              systems  where UTF-8 is the current character set and stores the
              UTF-8 in the new extra fields otherwise.  The option

                     u - UTF-8

              as in

                     zip archive dir -r -UN=UTF8

              forces [4mzip[24m to store UTF-8 as native in the archive.   Note  that
              storing  UTF-8 directly is the default on Unix systems that sup‚Äê
              port it.  This option could be useful on Windows  systems  where
              the  escaped  path is too large to be a valid path and the UTF-8
              version of the path is smaller, but native UTF-8 is not backward
              compatible on Windows systems.

       [1m-v[0m
       [1m--verbose[0m
              Verbose mode or print diagnostic version info.

              Normally,  when  applied to real operations, this option enables
              the display of a progress indicator during compression (see  [1m-dd[0m
              for  more  on  dots)  and requests verbose diagnostic info about
              zipfile structure oddities.

              However, when [1m-v [22mis the only command line argument a  diagnostic
              screen  is printed instead.  This should now work even if stdout
              is redirected to a file, allowing easy saving of the information
              for  sending  with  bug reports to Info-ZIP.  The version screen
              provides the help screen header with program name, version,  and
              release  date,  some pointers to the Info-ZIP home and distribu‚Äê
              tion sites, and shows information about the  target  environment
              (compiler type and version, OS version, compilation date and the
              enabled optional features used to create the [4mzip[24m executable).

       [1m-V[0m
       [1m--VMS-portable[0m
              [VMS] Save VMS file attributes.  (Files are  truncated at  EOF.)
              When  a  -V  archive is unpacked on a non-VMS system,  some file
              types (notably Stream_LF text  files   and   pure  binary  files
              like  fixed-512)  should be extracted intact.  Indexed files and
              file types with embedded record sizes  (notably  variable-length
              record types) will probably be seen as corrupt elsewhere.

       [1m-VV[0m
       [1m--VMS-specific[0m
              [VMS]  Save  VMS file attributes, and  all allocated blocks in a
              file,  including  any  data beyond EOF.  Useful for moving  ill-
              formed  files   among   VMS  systems.    When  a  -VV archive is
              unpacked on a non-VMS system, almost all files will appear  cor‚Äê
              rupt.

       [1m-w[0m
       [1m--VMS-versions[0m
              [VMS]  Append  the  version  number  of  the  files to the name,
              including multiple versions of files.  Default is  to  use  only
              the most recent version of a specified file.

       [1m-ww[0m
       [1m--VMS-dot-versions[0m
              [VMS]  Append  the  version  number  of  the  files to the name,
              including multiple versions of files,  using  the  .nnn  format.
              Default  is  to  use only the most recent version of a specified
              file.

       [1m-ws[0m
       [1m--wild-stop-dirs[0m
              Wildcards match only at a directory level.  Normally [4mzip[24m handles
              paths as strings and given the paths

                     /foo/bar/dir/file1.c

                     /foo/bar/file2.c

              an input pattern such as

                     /foo/bar/*

              normally  would match both paths, the * matching [1mdir/file1.c [22mand
              [1mfile2.c[22m.  Note that in the first case a directory  boundary  (/)
              was  crossed in the match.  With [1m-ws [22mno directory bounds will be
              included in the match, making  wildcards  local  to  a  specific
              directory  level.   So,  with  [1m-ws [22menabled, only the second path
              would be matched.

              When using [1m-ws[22m, use ** to match across directory boundaries as *
              does normally.

       [1m-x [22mfiles
       [1m--exclude [22mfiles
              Explicitly exclude the specified files, as in:

                     zip -r foo foo -x \*.o

              which  will include the contents of [1mfoo [22min [1mfoo.zip [22mwhile exclud‚Äê
              ing all the files that end in  [1m.o[22m.   The  backslash  avoids  the
              shell  filename  substitution, so that the name matching is per‚Äê
              formed by [4mzip[24m at all directory levels.

              Also possible:

                     zip -r foo foo -x@exclude.lst

              which will include the contents of [1mfoo [22min [1mfoo.zip [22mwhile  exclud‚Äê
              ing   all  the  files  that  match  the  patterns  in  the  file
              [1mexclude.lst[22m.

              The long option forms of the above are

                     zip -r foo foo --exclude \*.o

              and

                     zip -r foo foo --exclude @exclude.lst

              Multiple patterns can be specified, as in:

                     zip -r foo foo -x \*.o \*.c

              If there is no space between [1m-x [22mand the pattern, just one  value
              is assumed (no list):

                     zip -r foo foo -x\*.o

              See [1m-i [22mfor more on include and exclude.

       [1m-X[0m
       [1m--no-extra[0m
              Do  not save extra file attributes (Extended Attributes on OS/2,
              uid/gid and file times on Unix).   The  zip  format  uses  extra
              fields  to  include additional information for each entry.  Some
              extra fields are specific to particular systems while others are
              applicable to all systems.  Normally when [4mzip[24m reads entries from
              an existing archive, it reads the extra fields it knows,  strips
              the  rest,  and adds the extra fields applicable to that system.
              With [1m-X[22m, [4mzip[24m strips all old fields and only includes the Unicode
              and  Zip64 extra fields (currently these two extra fields cannot
              be disabled).

              Negating this  option,  [1m-X-[22m,  includes  all  the  default  extra
              fields, but also copies over any unrecognized extra fields.

       [1m-y[0m
       [1m--symlinks[0m
              For  UNIX and VMS (V8.3 and later), store symbolic links as such
              in the [4mzip[24m archive, instead of compressing and storing the  file
              referred  to  by  the  link.   This can avoid multiple copies of
              files being included in the archive as [4mzip[24m recurses  the  direc‚Äê
              tory trees and accesses files directly and by links.

       [1m-z[0m
       [1m--archive-comment[0m
              Prompt for a multi-line comment for the entire [4mzip[24m archive.  The
              comment is ended by a line containing just a period, or  an  end
              of file condition (^D on Unix, ^Z on MSDOS, OS/2, and VMS).  The
              comment can be taken from a file:

                     zip -z foo < foowhat

       [1m-Z [22mcm
       [1m--compression-method [22mcm
              Set the default compression method.  Currently the main  methods
              supported  by [4mzip[24m are [1mstore [22mand [1mdeflate[22m.  Compression method can
              be set to:

              [1mstore [22m- Setting the compression method to [1mstore  [22mforces  [4mzip[24m  to
              store  entries  with  no  compression.  This is generally faster
              than compressing entries, but results in no space savings.  This
              is the same as using [1m-0 [22m(compression level zero).

              [1mdeflate [22m- This is the default method for [4mzip[24m.  If [4mzip[24m determines
              that storing is better than deflation, the entry will be  stored
              instead.

              [1mbzip2 [22m- If [1mbzip2 [22msupport is compiled in, this compression method
              also becomes available.  Only some modern unzips currently  sup‚Äê
              port the [1mbzip2 [22mcompression method, so test the unzip you will be
              using before relying on archives using this method  (compression
              method 12).

              For  example,  to  add [1mbar.c [22mto archive [1mfoo [22musing [1mbzip2 [22mcompres‚Äê
              sion:

                     zip -Z bzip2 foo bar.c

              The compression method can be abbreviated:

                     zip -Zb foo bar.c

       [1m-#[0m
       [1m(-0, -1, -2, -3, -4, -5, -6, -7, -8, -9)[0m
              Regulate the speed of compression using the specified  digit  [1m#[22m,
              where  [1m-0  [22mindicates  no compression (store all files), [1m-1 [22mindi‚Äê
              cates the fastest compression speed (less  compression)  and  [1m-9[0m
              indicates  the  slowest  compression speed (optimal compression,
              ignores the suffix list). The default compression level is [1m-6.[0m

              Though still being worked, the intention is  this  setting  will
              control  compression  speed  for  all compression methods.  Cur‚Äê
              rently only deflation is controlled.

       [1m-![0m
       [1m--use-privileges[0m
              [WIN32] Use priviliges (if granted) to  obtain  all  aspects  of
              WinNT security.

       [1m-@[0m
       [1m--names-stdin[0m
              Take the list of input files from standard input. Only one file‚Äê
              name per line.

       [1m-$[0m
       [1m--volume-label[0m
              [MSDOS, OS/2, WIN32] Include the  volume  label  for  the  drive
              holding the first file to be compressed.  If you want to include
              only the volume label or to force  a  specific  drive,  use  the
              drive name as first file name, as in:

                     zip -$ foo a: c:bar

[1mEXAMPLES[0m
       The simplest example:

              zip stuff *

       creates the archive [4mstuff.zip[24m (assuming it does not exist) and puts all
       the files in the current directory in it, in compressed form (the  [1m.zip[0m
       suffix  is  added automatically, unless the archive name contains a dot
       already; this allows the explicit specification of other suffixes).

       Because of the way the shell on Unix does filename substitution,  files
       starting with "." are not included; to include these as well:

              zip stuff .* *

       Even  this  will not include any subdirectories from the current direc‚Äê
       tory.

       To zip up an entire directory, the command:

              zip -r foo foo

       creates the archive [4mfoo.zip[24m, containing all the files  and  directories
       in the directory [4mfoo[24m that is contained within the current directory.

       You  may  want  to  make  a [4mzip[24m archive that contains the files in [4mfoo[24m,
       without recording the directory name, [4mfoo[24m.  You can use the  [1m-j  [22moption
       to leave off the paths, as in:

              zip -j foo foo/*

       If  you are short on disk space, you might not have enough room to hold
       both the original directory and the corresponding  compressed  [4mzip[24m  ar‚Äê
       chive.   In this case, you can create the archive in steps using the [1m-m[0m
       option.  If [4mfoo[24m contains the subdirectories [4mtom[24m, [4mdick[24m, and  [4mharry[24m,  you
       can:

              zip -rm foo foo/tom
              zip -rm foo foo/dick
              zip -rm foo foo/harry

       where  the  first  command creates [4mfoo.zip[24m, and the next two add to it.
       At the completion of each [4mzip[24m command,  the  last  created  archive  is
       deleted, making room for the next [4mzip[24m command to function.

       Use  [1m-s  [22mto set the split size and create a split archive.  The size is
       given as a number followed optionally by one of k (kB), m (MB), g (GB),
       or t (TB).  The command

              zip -s 2g -r split.zip foo

       creates a split archive of the directory foo with splits no bigger than
       2 GB each.  If foo contained 5 GB of contents  and  the  contents  were
       stored  in  the split archive without compression (to make this example
       simple), this would create three splits, split.z01 at  2 GB,  split.z02
       at 2 GB, and split.zip at a little over 1 GB.

       The  [1m-sp [22moption can be used to pause [4mzip[24m between splits to allow chang‚Äê
       ing removable media, for example, but read the descriptions  and  warn‚Äê
       ings for both [1m-s [22mand [1m-sp [22mbelow.

       Though  [4mzip[24m does not update split archives, [4mzip[24m provides the new option
       [1m-O [22m([1m--output-file[22m) to allow split archives to be updated and saved in a
       new archive.  For example,

              zip inarchive.zip foo.c bar.c --out outarchive.zip

       reads  archive  [1minarchive.zip[22m,  even if split, adds the files [1mfoo.c [22mand
       [1mbar.c[22m, and writes the resulting archive to  [1moutarchive.zip[22m.   If  [1minar‚Äê[0m
       [1mchive.zip [22mis split then [1moutarchive.zip [22mdefaults to the same split size.
       Be aware that [1moutarchive.zip [22mand any split files that are created  with
       it  are always overwritten without warning.  This may be changed in the
       future.

[1mPATTERN MATCHING[0m
       This section applies only to Unix.  Watch this  space  for  details  on
       MSDOS  and  VMS  operation.  However, the special wildcard characters [1m*[0m
       and [1m[] [22mbelow apply to at least MSDOS also.

       The Unix shells ([4msh[24m, [4mcsh[24m, [4mbash[24m, and others) normally do  filename  sub‚Äê
       stitution (also called "globbing") on command arguments.  Generally the
       special characters are:

       [1m?      [22mmatch any single character

       [1m*      [22mmatch any number of characters (including none)

       [1m[]     [22mmatch any character in the range indicated within  the  brackets
              (example:  [a-f], [0-9]).  This form of wildcard matching allows
              a user to specify a list of characters between  square  brackets
              and  if any of the characters match the expression matches.  For
              example:

                     zip archive "*.[hc]"

              would archive all files in the current directory that end in  [1m.h[0m
              or [1m.c[22m.

              Ranges of characters are supported:

                     zip archive "[a-f]*"

              would  add  to  the  archive all files starting with "a" through
              "f".

              Negation is also supported, where any character in that position
              not in the list matches.  Negation is supported by adding [1m! [22mor [1m^[0m
              to the beginning of the list:

                     zip archive "*.[!o]"

              matches files that don't end in ".o".

              On WIN32, [] matching needs to be turned on with the -RE  option
              to avoid the confusion that names with [ or ] have caused.

       When  these  characters  are  encountered (without being escaped with a
       backslash or quotes), the shell will look for  files  relative  to  the
       current  path  that  match the pattern, and replace the argument with a
       list of the names that matched.

       The [4mzip[24m program can do the same matching on names that are in  the  [4mzip[0m
       archive  being  modified  or,  in  the  case  of the [1m-x [22m(exclude) or [1m-i[0m
       (include) options, on the list of files to be  operated  on,  by  using
       backslashes  or  quotes to tell the shell not to do the name expansion.
       In general, when [4mzip[24m encounters a name in the list of files to  do,  it
       first  looks  for the name in the file system.  If it finds it, it then
       adds it to the list of files to do.  If it does not find it,  it  looks
       for  the  name  in the [4mzip[24m archive being modified (if it exists), using
       the pattern matching characters described above, if present.  For  each
       match,  it  will  add  that  name to the list of files to be processed,
       unless this name matches one given with the  [1m-x  [22moption,  or  does  not
       match any name given with the [1m-i [22moption.

       The pattern matching includes the path, and so patterns like \*.o match
       names that end in ".o", no matter what the path prefix is.   Note  that
       the  backslash must precede every special character (i.e. ?*[]), or the
       entire argument must be enclosed in double quotes ("").

       In general, use backslashes or double quotes for paths that have  wild‚Äê
       cards  to  make  [4mzip[24m do the pattern matching for file paths, and always
       for paths and strings that have spaces or wildcards for [1m-i[22m, [1m-x[22m, [1m-R[22m, [1m-d[22m,
       and [1m-U [22mand anywhere [4mzip[24m needs to process the wildcards.

[1mENVIRONMENT[0m
       The  following  environment  variables  are  read  and  used  by [4mzip[24m as
       described.

       [1mZIPOPT[0m
              contains default options that will be  used  when  running  [4mzip[24m.
              The  contents of this environment variable will get added to the
              command line just after the [1mzip [22mcommand.

       [1mZIP[0m
              [Not on RISC OS and VMS] see ZIPOPT

       [1mZip$Options[0m
              [RISC OS] see ZIPOPT

       [1mZip$Exts[0m
              [RISC OS] contains extensions separated by a : that  will  cause
              native  filenames  with  one  of  the specified extensions to be
              added to the zip file with basename and extension swapped.

       [1mZIP_OPTS[0m
              [VMS] see ZIPOPT

[1mSEE ALSO[0m
       compress(1), shar(1L), tar(1), unzip(1L), gzip(1L)

[1mDIAGNOSTICS[0m
       The exit status (or error level) approximates the exit codes defined by
       PKWARE and takes on the following values, except under VMS:

              0      normal; no errors or warnings detected.

              2      unexpected end of zip file.

              3      a generic error in the zipfile format was detected.  Pro‚Äê
                     cessing may have completed successfully anyway; some bro‚Äê
                     ken zipfiles created by other archivers have simple work-
                     arounds.

              4      [4mzip[24m was unable to allocate memory for one or more buffers
                     during program initialization.

              5      a  severe error in the zipfile format was detected.  Pro‚Äê
                     cessing probably failed immediately.

              6      entry too large to be  processed  (such  as  input  files
                     larger  than  2 GB when not using Zip64 or trying to read
                     an existing archive that is too large) or entry too large
                     to be split with [4mzipsplit[0m

              7      invalid comment format

              8      [4mzip[24m -T failed or out of memory

              9      the user aborted [4mzip[24m prematurely with control-C (or simi‚Äê
                     lar)

              10     [4mzip[24m encountered an error while using a temp file

              11     read or seek error

              12     [4mzip[24m has nothing to do

              13     missing or empty zip file

              14     error writing to a file

              15     [4mzip[24m was unable to create a file to write to

              16     bad command line parameters

              18     [4mzip[24m could not open a specified file to read

              19     [4mzip[24m was compiled with options not supported on this  sys‚Äê
                     tem

       VMS  interprets  standard Unix (or PC) return values as other, scarier-
       looking things, so [4mzip[24m instead maps them into VMS-style  status  codes.
       In  general, [4mzip[24m sets VMS Facility = 1955 (0x07A3), Code = 2* Unix_sta‚Äê
       tus, and an appropriate Severity  (as  specified  in  ziperr.h).   More
       details   are   included   in   the  VMS-specific  documentation.   See
       [.vms]NOTES.TXT and [.vms]vms_msg_gen.c.

[1mBUGS[0m
       [4mzip[24m 3.0 is not compatible with PKUNZIP 1.10. Use [4mzip[24m 1.1 to produce [4mzip[0m
       files which can be extracted by PKUNZIP 1.10.

       [4mzip[24m  files  produced by [4mzip[24m 3.0 must not be [4mupdated[24m by [4mzip[24m 1.1 or PKZIP
       1.10, if they contain encrypted members or if they have  been  produced
       in a pipe or on a non-seekable device. The old versions of [4mzip[24m or PKZIP
       would create an archive with an incorrect format.  The old versions can
       list the contents of the zip file but cannot extract it anyway (because
       of the new compression algorithm).  If you do not  use  encryption  and
       use regular disk files, you do not have to care about this problem.

       Under  VMS, not all of the odd file formats are treated properly.  Only
       stream-LF format [4mzip[24m files are expected to work with [4mzip[24m.   Others  can
       be  converted  using  Rahul  Dhesi's BILF program.  This version of [4mzip[0m
       handles some of the conversion internally.  When using Kermit to trans‚Äê
       fer  zip  files  from  VMS to MSDOS, type "set file type block" on VMS.
       When transfering from MSDOS to VMS, type "set file type fixed" on  VMS.
       In both cases, type "set file type binary" on MSDOS.

       Under  some  older  VMS  versions, [4mzip[24m may hang for file specifications
       that use DECnet syntax [4mfoo::*.*.[0m

       On OS/2, zip cannot match some names, such as those including an excla‚Äê
       mation  mark  or a hash sign.  This is a bug in OS/2 itself: the 32-bit
       DosFindFirst/Next don't find such names.  Other programs  such  as  GNU
       tar are also affected by this bug.

       Under  OS/2, the amount of Extended Attributes displayed by DIR is (for
       compatibility) the amount returned by the 16-bit version  of  DosQuery‚Äê
       PathInfo().  Otherwise OS/2 1.3 and 2.0 would report different EA sizes
       when DIRing a file.  However, the  structure  layout  returned  by  the
       32-bit  DosQueryPathInfo()  is  a  bit different, it uses extra padding
       bytes and link pointers (it's a linked list)  to  have  all  fields  on
       4-byte  boundaries for portability to future RISC OS/2 versions. There‚Äê
       fore the value reported by [4mzip[24m (which uses this 32-bit-mode size)  dif‚Äê
       fers  from  that  reported  by  DIR.   [4mzip[24m stores the 32-bit format for
       portability, even the 16-bit MS-C-compiled version running on OS/2 1.3,
       so even this one shows the 32-bit-mode size.

[1mAUTHORS[0m
       Copyright (C) 1997-2008 Info-ZIP.

       Currently distributed under the Info-ZIP license.

       Copyright (C) 1990-1997 Mark Adler, Richard B. Wales, Jean-loup Gailly,
       Onno van der Linden, Kai Uwe Rommel, Igor Mandrichenko, John  Bush  and
       Paul Kienitz.

       Original copyright:

       Permission is granted to any individual or institution to use, copy, or
       redistribute this software so long as all of  the  original  files  are
       included,  that  it  is  not  sold  for profit, and that this copyright
       notice is retained.

       LIKE ANYTHING ELSE THAT'S FREE, ZIP AND ITS  ASSOCIATED  UTILITIES  ARE
       PROVIDED  AS IS AND COME WITH NO WARRANTY OF ANY KIND, EITHER EXPRESSED
       OR IMPLIED. IN NO EVENT WILL THE COPYRIGHT HOLDERS BE  LIABLE  FOR  ANY
       DAMAGES RESULTING FROM THE USE OF THIS SOFTWARE.

       Please  send  bug reports and comments using the web page at: [4mwww.info-[0m
       [4mzip.org[24m.  For bug reports, please  include  the  version  of  [4mzip[24m  (see
       [4mzip[24m [4m-h[24m),  the make options used to compile it (see [4mzip[24m [4m-v[24m), the machine
       and operating system in use, and as much additional information as pos‚Äê
       sible.

[1mACKNOWLEDGEMENTS[0m
       Thanks  to  R. P. Byrne for his [4mShrink.Pas[24m program, which inspired this
       project, and from which the shrink algorithm was stolen; to  Phil  Katz
       for  placing in the public domain the [4mzip[24m file format, compression for‚Äê
       mat, and .ZIP filename extension, and for accepting  minor  changes  to
       the  file  format; to Steve Burg for clarifications on the deflate for‚Äê
       mat; to Haruhiko Okumura and Leonid Broukhis for providing some  useful
       ideas  for  the  compression  algorithm; to Keith Petersen, Rich Wales,
       Hunter Goatley and Mark Adler for providing a mailing list and [4mftp[24m site
       for  the  Info-ZIP  group to use; and most importantly, to the Info-ZIP
       group itself (listed in the file [4minfozip.who[24m)  without  whose  tireless
       testing  and bug-fixing efforts a portable [4mzip[24m would not have been pos‚Äê
       sible.  Finally we should thank (blame) the first  Info-ZIP  moderator,
       David  Kirschbaum,  for  getting  us into this mess in the first place.
       The manual page was rewritten for Unix by R. P. C. Rodgers and  updated
       by E. Gordon for [4mzip[24m 3.0.

Info-ZIP                      16 June 2008 (v3.0)                      ZIP(1L)
